package com.rohith.aeh.hub.servlets;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.rohith.aeh.hub.exception.AEHHubException;
import com.rohith.aeh.hub.servlets.constants.AEHubConstants;
import com.rohith.aeh.hub.servlets.constants.AccessGrantErrorCodes;
import com.rohith.aeh.hub.validators.AccessGrantValidator;
import com.rohith.aeh.hub.validators.RequestValidator;

@WebServlet("/access")
public class AccessValidationServlet extends HttpServlet {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private RequestValidator requestValidator;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		try {
			if (requestValidator.validate(req)) {
				resp.setHeader(AEHubConstants.CLIENT_VALIDATION_RESPONSE_HEADER, "true");
			} else {

				routeResponseBasedOnError(req,resp);
				
				
			}
		} catch (AEHHubException e) {
			throw new ServletException("Exception occured while handling request",e);
		}
	}
	
	/**
	 * Sends Response based on the error response codes generated by the access request validators
	 * 
	 * @param req
	 * @param resp
	 */
	private void routeResponseBasedOnError(HttpServletRequest req, HttpServletResponse resp) {
	
		resp.setHeader(AEHubConstants.CLIENT_VALIDATION_RESPONSE_HEADER, "false");
		int errorCode = (int)req.getAttribute(AEHubConstants.ERROR_MAPPING);
		resp.setHeader(AEHubConstants.ERROR_MAPPING, String.valueOf(errorCode));
		switch(errorCode){
		case AccessGrantErrorCodes.INVALID_TOKEN_KEY:
		case AccessGrantErrorCodes.EXPIRED_TOKEN_KEY:
		case AccessGrantErrorCodes.NULL_TOKEN_KEY:
			resp.setHeader(AEHubConstants.LOGIN_PAGE_REDIRECTION_URL, createURL(req));
			break;
		case AccessGrantErrorCodes.CLIENT_NOT_PRESENT:
		case AccessGrantErrorCodes.INVALID_SCOPE:
		case AccessGrantErrorCodes.INVALID_CLIENT_SECRET:	
		case AccessGrantErrorCodes.SCOPE_NOT_GRANTED:
			break;			

		}
		
		System.out.println(errorCode);
		
	}
	private String createURL(HttpServletRequest req) {
		StringBuilder builder = new StringBuilder(req.getScheme()).append("://").append(req.getServerName()).append(":")
				.append(req.getServerPort()).append(req.getContextPath()).append("/")
				.append("loginresource/ServerLogin.jsp");
		return builder.toString();
	}
	@Override
	public void init() throws ServletException {
		super.init();
		this.requestValidator = new AccessGrantValidator();
	}
}
